// –ú–æ–¥—É–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
class UIUpdater {
    constructor(elements, engine) {
        this.elements = elements;
        this.engine = engine;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    updateAll() {
        this.updateHeader();
        this.updateStats();
        this.updateAdvisorContext();
        this.updateGameCard();
        this.updateEffects();
        this.updateAchievements();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    updateHeader() {
        const termProgress = ((this.engine.gameState.currentDecisionIndex % GAME_CONFIG.decisionsPerTerm) / GAME_CONFIG.decisionsPerTerm) * 100;
        const overallProgress = (this.engine.gameState.currentDecisionIndex / (GAME_CONFIG.maxTerms * GAME_CONFIG.decisionsPerTerm)) * 100;
        const difficultyName = DIFFICULTY_NAMES[this.engine.gameState.difficulty - 1] || '–•–∞–æ—Å';

        UIComponents.updateTextContent(this.elements.currentTerm, this.engine.gameState.currentTerm);
        UIComponents.updateTextContent(this.elements.currentDecision, this.engine.gameState.currentDecisionIndex + 1);
        UIComponents.updateTextContent(this.elements.difficultyDisplay, difficultyName);

        if (this.elements.termProgress) {
            this.elements.termProgress.style.width = `${termProgress}%`;
        }
        if (this.elements.overallProgress) {
            this.elements.overallProgress.style.width = `${overallProgress}%`;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    updateStats() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        if (this.elements.statsGrid) {
            this.elements.statsGrid.innerHTML = '';
            Object.entries(this.engine.gameState.stats).forEach(([key, value]) => {
                const statItem = UIComponents.createStatItem(key, value, STAT_LABELS[key]);
                this.elements.statsGrid.appendChild(statItem);
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
        if (this.elements.overallBalance) {
            const balanceIndicator = UIComponents.createBalanceIndicator(this.engine.gameState.stats);
            this.elements.overallBalance.innerHTML = '';
            this.elements.overallBalance.appendChild(balanceIndicator);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        this.updateMetrics();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ (–∫–æ—Ä—Ä—É–ø—Ü–∏—è, –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å)
    updateMetrics() {
        if (this.elements.corruptionValue) {
            const corruption = this.engine.gameState.metrics.corruption;
            this.elements.corruptionValue.textContent = `${corruption}%`;
            this.elements.corruptionValue.className = `metric-value ${
                corruption > 70 ? 'bad' : corruption > 40 ? 'medium' : 'good'
            }`;
        }

        if (this.elements.satisfactionValue) {
            const satisfaction = this.engine.gameState.metrics.satisfaction;
            this.elements.satisfactionValue.textContent = `${satisfaction}%`;
            this.elements.satisfactionValue.className = `metric-value ${
                satisfaction > 70 ? 'good' : satisfaction > 40 ? 'medium' : 'bad'
            }`;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞
    updateAdvisorContext() {
        const currentDecision = this.engine.getCurrentDecision();
        const advisor = ADVISOR_BACKSTORIES[currentDecision.advisor];

        if (this.elements.advisorAvatar && advisor) {
            this.elements.advisorAvatar.textContent = advisor.avatar;
        }

        UIComponents.updateTextContent(this.elements.advisorName, advisor?.name || '');
        UIComponents.updateTextContent(this.elements.advisorQuote, `"${advisor?.catchPhrase || ''}"` );
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    updateGameCard() {
        const decision = this.engine.getCurrentDecision();
        const advisor = ADVISOR_BACKSTORIES[decision.advisor];

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä —Å–æ–≤–µ—Ç–Ω–∏–∫–∞ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
        if (this.elements.cardAdvisorAvatar && advisor) {
            this.elements.cardAdvisorAvatar.textContent = advisor.avatar;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–≤–µ—Ç–Ω–∏–∫–µ
        UIComponents.updateTextContent(this.elements.cardAdvisorName, advisor?.name || '');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ—à–µ–Ω–∏—è
        UIComponents.updateTextContent(this.elements.cardTitle, decision.title);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        UIComponents.updateTextContent(this.elements.cardDescription, decision.description);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è
        if (this.elements.cardConsequences && decision.consequences) {
            this.elements.cardConsequences.innerHTML = `
                <div class="consequences-label">–í–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è:</div>
                <div class="consequences-text">${decision.consequences}</div>
            `;
            this.elements.cardConsequences.classList.remove('hidden');
        } else if (this.elements.cardConsequences) {
            this.elements.cardConsequences.classList.add('hidden');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
        this.updateUrgencyBadge(decision.urgency);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
        this.updateChoiceButtons(decision);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–π–¥–∂–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
    updateUrgencyBadge(urgency) {
        if (!this.elements.urgencyBadge) return;

        const badge = UIComponents.createUrgencyBadge(urgency);
        this.elements.urgencyBadge.innerHTML = '';
        this.elements.urgencyBadge.appendChild(badge);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞
    updateChoiceButtons(decision) {
        // –õ–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ (–æ—Ç–∫–ª–æ–Ω–∏—Ç—å)
        if (this.elements.leftChoice) {
            const choiceText = this.elements.leftChoice.querySelector('.choice-text');
            const choiceEffects = this.elements.leftChoice.querySelector('.choice-effects');
            
            if (choiceText) {
                choiceText.textContent = decision.leftChoice.text;
            }
            
            if (choiceEffects) {
                choiceEffects.innerHTML = '';
                this.addEffectIndicators(choiceEffects, decision.leftChoice.effects);
            }
        }

        // –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ (–ø—Ä–∏–Ω—è—Ç—å)
        if (this.elements.rightChoice) {
            const choiceText = this.elements.rightChoice.querySelector('.choice-text');
            const choiceEffects = this.elements.rightChoice.querySelector('.choice-effects');
            
            if (choiceText) {
                choiceText.textContent = decision.rightChoice.text;
            }
            
            if (choiceEffects) {
                choiceEffects.innerHTML = '';
                this.addEffectIndicators(choiceEffects, decision.rightChoice.effects);
            }
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    addEffectIndicators(container, effects) {
        const effectEntries = Object.entries(effects).filter(([_, value]) => value !== 0);
        
        if (effectEntries.length === 0) {
            const noEffects = document.createElement('div');
            noEffects.className = 'effect-indicator';
            noEffects.textContent = '–ù–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–æ–≤';
            noEffects.style.opacity = '0.7';
            container.appendChild(noEffects);
            return;
        }

        effectEntries.slice(0, 4).forEach(([stat, value]) => {
            const indicator = UIComponents.createEffectIndicator(stat, value);
            container.appendChild(indicator);
        });

        // –ü–æ–∫–∞–∑–∞—Ç—å "+N" –µ—Å–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –±–æ–ª—å—à–µ 4
        if (effectEntries.length > 4) {
            const moreIndicator = document.createElement('div');
            moreIndicator.className = 'effect-indicator';
            moreIndicator.innerHTML = `<span>+${effectEntries.length - 4}</span>`;
            moreIndicator.style.opacity = '0.7';
            container.appendChild(moreIndicator);
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    updateEffects() {
        if (!this.elements.effectBadgesList) return;

        this.elements.effectBadgesList.innerHTML = '';

        // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        this.engine.gameState.temporaryEffects.forEach(effect => {
            const hasPositiveEffects = Object.values(effect.effects).some(val => val > 0);
            const hasNegativeEffects = Object.values(effect.effects).some(val => val < 0);
            
            let type = 'neutral';
            if (hasPositiveEffects && !hasNegativeEffects) {
                type = 'positive';
            } else if (hasNegativeEffects && !hasPositiveEffects) {
                type = 'negative';
            }

            const icon = this.getEffectIcon(effect.description);
            const effectData = {
                id: effect.id,
                type: type,
                icon: icon,
                title: effect.description,
                description: `–î–µ–π—Å—Ç–≤—É–µ—Ç ${effect.duration} —Ö–æ–¥–æ–≤. –≠—Ñ—Ñ–µ–∫—Ç—ã: ${this.formatEffects(effect.effects)}`
            };

            const badge = UIComponents.createEffectBadge(effectData);
            this.elements.effectBadgesList.appendChild(badge);
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
    getEffectIcon(description) {
        if (description.includes('–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ')) return 'üîß';
        if (description.includes('–∫—Ä–∏–∑–∏—Å')) return '‚ö†Ô∏è';
        if (description.includes('–±–æ–Ω—É—Å')) return '‚¨ÜÔ∏è';
        if (description.includes('—à—Ç—Ä–∞—Ñ')) return '‚¨áÔ∏è';
        if (description.includes('–≤–æ–µ–Ω–Ω')) return '‚öîÔ∏è';
        if (description.includes('—ç–∫–æ–Ω–æ–º')) return 'üí∞';
        if (description.includes('–Ω–∞—É–∫')) return 'üî¨';
        if (description.includes('—ç–∫–æ–ª–æ–≥')) return 'üå±';
        if (description.includes('–æ–±—â–µ—Å—Ç–≤–æ')) return 'üë•';
        if (description.includes('–¥–∏–ø–ª–æ–º–∞—Ç')) return 'ü§ù';
        return 'üîÑ';
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    formatEffects(effects) {
        return Object.entries(effects)
            .map(([stat, value]) => `${STAT_LABELS[stat]}: ${value > 0 ? '+' : ''}${value}`)
            .join(', ');
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    updateAchievements() {
        if (!this.elements.achievementItems) return;

        this.elements.achievementItems.innerHTML = '';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        const recentAchievements = this.engine.localState.achievements
            .filter(achievement => achievement.unlocked)
            .slice(-5);

        recentAchievements.forEach(achievement => {
            const item = UIComponents.createAchievementItem(achievement);
            this.elements.achievementItems.appendChild(item);
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    updateEndDialog() {
        const gameState = this.engine.gameState;
        const gameStats = gameState.gameStats;

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∏–∫–æ–Ω–∫–∞
        if (gameState.gameWon) {
            UIComponents.updateTextContent(this.elements.gameEndTitle, '–ü–û–ë–ï–î–ê!');
            UIComponents.updateTextContent(this.elements.gameEndIcon, 'üèÜ');
            UIComponents.updateTextContent(this.elements.gameEndMessage, 
                '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∞–≤–∏–ª–∏ —Å—Ç—Ä–∞–Ω–æ–π –≤—Å–µ 5 —Å—Ä–æ–∫–æ–≤ –∏ –ø—Ä–∏–≤–µ–ª–∏ –µ—ë –∫ –ø—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏—é.');
        } else {
            UIComponents.updateTextContent(this.elements.gameEndTitle, '–ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê');
            UIComponents.updateTextContent(this.elements.gameEndIcon, 'üíÄ');
            const reason = gameStats.defeatReason || '–û–¥–∏–Ω –∏–∑ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –¥–æ—Å—Ç–∏–≥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è';
            UIComponents.updateTextContent(this.elements.gameEndMessage, 
                `–í–∞—à–µ –ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –Ω–µ—É–¥–∞—á–µ–π. ${reason}.`);
        }

        // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if (this.elements.finalStatsGrid) {
            this.elements.finalStatsGrid.innerHTML = '';
            Object.entries(gameStats.finalStats).forEach(([key, value]) => {
                const statItem = UIComponents.createStatItem(key, value, STAT_LABELS[key]);
                this.elements.finalStatsGrid.appendChild(statItem);
            });
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã
        if (this.elements.gameStatistics) {
            this.elements.gameStatistics.innerHTML = '';
            
            const stats = [
                { label: '–ü—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–π', value: gameStats.totalDecisions },
                { label: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å—Ä–æ–∫–æ–≤', value: gameStats.completedTerms },
                { label: '–°–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π', value: gameStats.randomEventsTriggered },
                { label: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å', value: gameStats.highestDifficulty },
                { label: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ', value: this.engine.localState.achievements.length },
                { label: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π', value: gameStats.criticalDecisions }
            ];

            stats.forEach(stat => {
                const item = document.createElement('div');
                item.className = 'metric-item';
                item.innerHTML = `
                    <span class="metric-label">${stat.label}:</span>
                    <span class="metric-value">${stat.value}</span>
                `;
                this.elements.gameStatistics.appendChild(item);
            });
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∫ —ç–ª–µ–º–µ–Ω—Ç—É
    animateElement(element, animationClass = 'card-slide-in') {
        if (!element) return;
        
        element.classList.add(animationClass);
        setTimeout(() => {
            element.classList.remove(animationClass);
        }, 300);
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
    safeUpdate(element, updateFn) {
        try {
            if (element) {
                updateFn(element);
            }
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞:', error);
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
if (typeof module !== 'undefined' && module.exports) {
    module.exports = UIUpdater;
} else {
    window.UIUpdater = UIUpdater;
}